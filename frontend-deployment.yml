apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: node:18-alpine
          command: ["/bin/sh"]
          args:
            - -c
            - |
              cat > server.js << 'EOF'
              const http = require('http');
              const PORT = 3000;

              const server = http.createServer(async (req, res) => {
                if (req.url === '/') {
                  res.writeHead(200, {'Content-Type': 'text/html'});
                  res.end(`
                    <html>
                      <head><title>K8s Blog</title></head>
                      <body>
                        <h1>Kubernetes Blog Application</h1>
                        <button onclick="loadPosts()">Load Posts</button>
                        <div id="posts"></div>
                        <script>
                          async function loadPosts() {
                            const response = await fetch('/api/posts');
                            const data = await response.json();
                            document.getElementById('posts').innerHTML = 
                              data.posts.map(p => 
                                '<div><h3>' + p.title + '</h3><p>' + p.content + '</p></div>'
                              ).join('');
                          }
                        </script>
                      </body>
                    </html>
                  `);
                } else if (req.url.startsWith('/api/')) {
                  // Proxy to backend
                  const backendUrl = 'http://backend-service:5000' + req.url;
                  const backendRes = await fetch(backendUrl);
                  const data = await backendRes.json();
                  res.writeHead(200, {'Content-Type': 'application/json'});
                  res.end(JSON.stringify(data));
                } else {
                  res.writeHead(404);
                  res.end('Not Found');
                }
              });

              server.listen(PORT, () => console.log('Frontend running on port ' + PORT));
              EOF
              node server.js
          ports:
            - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 3000
  type: LoadBalancer # Exposes to outside world
