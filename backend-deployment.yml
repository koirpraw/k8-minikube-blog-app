apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
data:
  DATABASE_URL: "postgresql://bloguser:mysecretpassword@postgres-service:5432/blogdb"
  REDIS_URL: "redis://redis-service:6379"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 3 # Run 3 copies for high availability
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: python:3.11-slim
          command: ["/bin/sh"]
          args:
            - -c
            - |
              pip install flask psycopg2-binary redis &&
              python -c "
              from flask import Flask, jsonify
              import os
              app = Flask(__name__)

              @app.route('/api/health')
              def health():
                  return jsonify({'status': 'healthy', 'service': 'backend'})

              @app.route('/api/posts')
              def posts():
                  return jsonify({'posts': [
                      {'id': 1, 'title': 'First Post', 'content': 'Hello K8s!'},
                      {'id': 2, 'title': 'Second Post', 'content': 'Learning Kubernetes'}
                  ]})

              if __name__ == '__main__':
                  app.run(host='0.0.0.0', port=5000)
              "
          ports:
            - containerPort: 5000
          envFrom:
            - configMapRef:
                name: backend-config
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  ports:
    - port: 5000
      targetPort: 5000
  type: ClusterIP
